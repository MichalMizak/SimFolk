/*
 * This file is generated by jOOQ.
*/
package sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.Indexes;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.Keys;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.Simfolk;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.records.TermGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TTermGroup extends TableImpl<TermGroupRecord> {

    private static final long serialVersionUID = -274748258;

    /**
     * The reference instance of <code>simfolk.term_group</code>
     */
    public static final TTermGroup T_TERM_GROUP = new TTermGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermGroupRecord> getRecordType() {
        return TermGroupRecord.class;
    }

    /**
     * The column <code>simfolk.term_group.groupId</code>.
     */
    public final TableField<TermGroupRecord, Long> GROUPID = createField("groupId", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>simfolk.term_group.termScheme</code>.
     */
    public final TableField<TermGroupRecord, String> TERMSCHEME = createField("termScheme", org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>simfolk.term_group.termComparisonAlgorithm</code>.
     */
    public final TableField<TermGroupRecord, String> TERMCOMPARISONALGORITHM = createField("termComparisonAlgorithm", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>simfolk.term_group.tolerance</code>.
     */
    public final TableField<TermGroupRecord, Double> TOLERANCE = createField("tolerance", org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>simfolk.term_group.incidenceCount</code>.
     */
    public final TableField<TermGroupRecord, Integer> INCIDENCECOUNT = createField("incidenceCount", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>simfolk.term_group</code> table reference
     */
    public TTermGroup() {
        this(DSL.name("term_group"), null);
    }

    /**
     * Create an aliased <code>simfolk.term_group</code> table reference
     */
    public TTermGroup(String alias) {
        this(DSL.name(alias), T_TERM_GROUP);
    }

    /**
     * Create an aliased <code>simfolk.term_group</code> table reference
     */
    public TTermGroup(Name alias) {
        this(alias, T_TERM_GROUP);
    }

    private TTermGroup(Name alias, Table<TermGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private TTermGroup(Name alias, Table<TermGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Simfolk.SIMFOLK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TERM_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TermGroupRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_TERM_GROUP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TermGroupRecord> getPrimaryKey() {
        return Keys.KEY_TERM_GROUP_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TermGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<TermGroupRecord>>asList(Keys.KEY_TERM_GROUP_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TTermGroup as(String alias) {
        return new TTermGroup(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TTermGroup as(Name alias) {
        return new TTermGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TTermGroup rename(String name) {
        return new TTermGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TTermGroup rename(Name name) {
        return new TTermGroup(name, null);
    }
}
