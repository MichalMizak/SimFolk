/*
 * This file is generated by jOOQ.
*/
package sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.Indexes;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.Keys;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.Simfolk;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.records.SongRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TSong extends TableImpl<SongRecord> {

    private static final long serialVersionUID = 1500119617;

    /**
     * The reference instance of <code>simfolk.song</code>
     */
    public static final TSong T_SONG = new TSong();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SongRecord> getRecordType() {
        return SongRecord.class;
    }

    /**
     * The column <code>simfolk.song.songId</code>.
     */
    public final TableField<SongRecord, Long> SONGID = createField("songId", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>simfolk.song.lyrics</code>.
     */
    public final TableField<SongRecord, String> LYRICS = createField("lyrics", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>simfolk.song.cleanLyrics</code>.
     */
    public final TableField<SongRecord, String> CLEANLYRICS = createField("cleanLyrics", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>simfolk.song.title</code>.
     */
    public final TableField<SongRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>simfolk.song.songStyle</code>.
     */
    public final TableField<SongRecord, String> SONGSTYLE = createField("songStyle", org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>simfolk.song.region</code>.
     */
    public final TableField<SongRecord, String> REGION = createField("region", org.jooq.impl.SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>simfolk.song.source</code>.
     */
    public final TableField<SongRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>simfolk.song</code> table reference
     */
    public TSong() {
        this(DSL.name("song"), null);
    }

    /**
     * Create an aliased <code>simfolk.song</code> table reference
     */
    public TSong(String alias) {
        this(DSL.name(alias), T_SONG);
    }

    /**
     * Create an aliased <code>simfolk.song</code> table reference
     */
    public TSong(Name alias) {
        this(alias, T_SONG);
    }

    private TSong(Name alias, Table<SongRecord> aliased) {
        this(alias, aliased, null);
    }

    private TSong(Name alias, Table<SongRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Simfolk.SIMFOLK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SONG_LYRICS, Indexes.SONG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SongRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_SONG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SongRecord> getPrimaryKey() {
        return Keys.KEY_SONG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SongRecord>> getKeys() {
        return Arrays.<UniqueKey<SongRecord>>asList(Keys.KEY_SONG_PRIMARY, Keys.KEY_SONG_LYRICS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSong as(String alias) {
        return new TSong(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TSong as(Name alias) {
        return new TSong(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TSong rename(String name) {
        return new TSong(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TSong rename(Name name) {
        return new TSong(name, null);
    }
}
