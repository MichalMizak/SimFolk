/*
 * This file is generated by jOOQ.
*/
package sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated;


import javax.annotation.Generated;

import org.jooq.Index;
import org.jooq.OrderField;
import org.jooq.impl.Internal;

import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TSong;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TSongToAttribute;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TTerm;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TTermGroup;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TTermGroupToTerm;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TTermTokenized;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TVectorAlgorithmConfiguration;
import sk.upjs.ics.mmizak.simfolk.core.database.jooq.generated.tables.TWeightedTermGroup;


/**
 * A class modelling indexes of tables of the <code>simfolk</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indexes {

    // -------------------------------------------------------------------------
    // INDEX definitions
    // -------------------------------------------------------------------------

    public static final Index SONG_LYRICS = Indexes0.SONG_LYRICS;
    public static final Index SONG_PRIMARY = Indexes0.SONG_PRIMARY;
    public static final Index SONG_TO_ATTRIBUTE_PRIMARY = Indexes0.SONG_TO_ATTRIBUTE_PRIMARY;
    public static final Index TERM_LYRICSFRAGMENT = Indexes0.TERM_LYRICSFRAGMENT;
    public static final Index TERM_PRIMARY = Indexes0.TERM_PRIMARY;
    public static final Index TERM_GROUP_PRIMARY = Indexes0.TERM_GROUP_PRIMARY;
    public static final Index TERM_GROUP_TO_TERM_PRIMARY = Indexes0.TERM_GROUP_TO_TERM_PRIMARY;
    public static final Index TERM_GROUP_TO_TERM_TERMID = Indexes0.TERM_GROUP_TO_TERM_TERMID;
    public static final Index TERM_TOKENIZED_PRIMARY = Indexes0.TERM_TOKENIZED_PRIMARY;
    public static final Index VECTOR_ALGORITHM_CONFIGURATION_PRIMARY = Indexes0.VECTOR_ALGORITHM_CONFIGURATION_PRIMARY;
    public static final Index VECTOR_ALGORITHM_CONFIGURATION_TERMSCHEME = Indexes0.VECTOR_ALGORITHM_CONFIGURATION_TERMSCHEME;
    public static final Index WEIGHTED_TERM_GROUP_GROUPID = Indexes0.WEIGHTED_TERM_GROUP_GROUPID;
    public static final Index WEIGHTED_TERM_GROUP_PRIMARY = Indexes0.WEIGHTED_TERM_GROUP_PRIMARY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Indexes0 {
        public static Index SONG_LYRICS = Internal.createIndex("lyrics", TSong.T_SONG, new OrderField[] { TSong.T_SONG.LYRICS }, true);
        public static Index SONG_PRIMARY = Internal.createIndex("PRIMARY", TSong.T_SONG, new OrderField[] { TSong.T_SONG.SONGID }, true);
        public static Index SONG_TO_ATTRIBUTE_PRIMARY = Internal.createIndex("PRIMARY", TSongToAttribute.T_SONG_TO_ATTRIBUTE, new OrderField[] { TSongToAttribute.T_SONG_TO_ATTRIBUTE.SONGID, TSongToAttribute.T_SONG_TO_ATTRIBUTE.ATTRIBUTE }, true);
        public static Index TERM_LYRICSFRAGMENT = Internal.createIndex("lyricsFragment", TTerm.T_TERM, new OrderField[] { TTerm.T_TERM.LYRICSFRAGMENT, TTerm.T_TERM.TERMSCHEME }, true);
        public static Index TERM_PRIMARY = Internal.createIndex("PRIMARY", TTerm.T_TERM, new OrderField[] { TTerm.T_TERM.TERMID }, true);
        public static Index TERM_GROUP_PRIMARY = Internal.createIndex("PRIMARY", TTermGroup.T_TERM_GROUP, new OrderField[] { TTermGroup.T_TERM_GROUP.GROUPID, TTermGroup.T_TERM_GROUP.TERMCOMPARISONALGORITHM, TTermGroup.T_TERM_GROUP.TOLERANCE }, true);
        public static Index TERM_GROUP_TO_TERM_PRIMARY = Internal.createIndex("PRIMARY", TTermGroupToTerm.T_TERM_GROUP_TO_TERM, new OrderField[] { TTermGroupToTerm.T_TERM_GROUP_TO_TERM.GROUPID, TTermGroupToTerm.T_TERM_GROUP_TO_TERM.TERMID }, true);
        public static Index TERM_GROUP_TO_TERM_TERMID = Internal.createIndex("termId", TTermGroupToTerm.T_TERM_GROUP_TO_TERM, new OrderField[] { TTermGroupToTerm.T_TERM_GROUP_TO_TERM.TERMID }, false);
        public static Index TERM_TOKENIZED_PRIMARY = Internal.createIndex("PRIMARY", TTermTokenized.T_TERM_TOKENIZED, new OrderField[] { TTermTokenized.T_TERM_TOKENIZED.TERMID, TTermTokenized.T_TERM_TOKENIZED.ORDERNUMBER }, true);
        public static Index VECTOR_ALGORITHM_CONFIGURATION_PRIMARY = Internal.createIndex("PRIMARY", TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION, new OrderField[] { TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.CONFIGURATIONID }, true);
        public static Index VECTOR_ALGORITHM_CONFIGURATION_TERMSCHEME = Internal.createIndex("termScheme", TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION, new OrderField[] { TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.TERMSCHEME, TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.TERMDIMENSION, TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.TERMWEIGHTTYPE, TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.VECTORINCLUSION, TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.TERMCOMPARISONALGORITHM, TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.TOLERANCE, TVectorAlgorithmConfiguration.T_VECTOR_ALGORITHM_CONFIGURATION.VECTORCOMPARISONALGORITHM }, true);
        public static Index WEIGHTED_TERM_GROUP_GROUPID = Internal.createIndex("groupId", TWeightedTermGroup.T_WEIGHTED_TERM_GROUP, new OrderField[] { TWeightedTermGroup.T_WEIGHTED_TERM_GROUP.GROUPID }, false);
        public static Index WEIGHTED_TERM_GROUP_PRIMARY = Internal.createIndex("PRIMARY", TWeightedTermGroup.T_WEIGHTED_TERM_GROUP, new OrderField[] { TWeightedTermGroup.T_WEIGHTED_TERM_GROUP.SONGID, TWeightedTermGroup.T_WEIGHTED_TERM_GROUP.GROUPID }, true);
    }
}
